// <auto-generated />
using System;
using Infrastructure.Configuration.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20250731145133_AddNewsCategory")]
    partial class AddNewsCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("CodeGenerator")
                .StartsAt(10000L)
                .IncrementsBy(2)
                .HasMax(9223372036854775807L);

            modelBuilder.Entity("Domain.Entities.Blog.ArticleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("SummaryEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummaryFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Blog.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleRouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RouteId");

                    b.ToTable("RoleRouteMap", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Identity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasMaxLength(6000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleFa")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ParentProductCategoryId");

                    b.ToTable("Category", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Document", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Option", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescrptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrptionFa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("TitleFa")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.RelatedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Related", "Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.TreatmentCenterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TreatmentCenter", "Product");
                });

            modelBuilder.Entity("Domain.Entities.System.CatalogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Catalog", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.ChatGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatGroup", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.ChatMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Domain.Entities.System.DepartementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departement", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.FeatureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEnFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEnOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEnThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEnTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFaFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFaOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFaThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextFaTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaTwo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feature", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6a6e1eb-8ef7-45ea-aef9-f199b96f92a9"),
                            ImageFour = "",
                            ImageOne = "",
                            ImageThree = "",
                            ImageTwo = "",
                            TextEnFour = "",
                            TextEnOne = "",
                            TextEnThree = "",
                            TextEnTwo = "",
                            TextFaFour = "",
                            TextFaOne = "",
                            TextFaThree = "",
                            TextFaTwo = "",
                            TitleEnFour = "",
                            TitleEnOne = "",
                            TitleEnThree = "",
                            TitleEnTwo = "",
                            TitleFaFour = "",
                            TitleFaOne = "",
                            TitleFaThree = "",
                            TitleFaTwo = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.System.FeedbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExplanationEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobPositionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPositionFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedback", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Message", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.NewsCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NewsCategory", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.NewsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("NewsCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferencesLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("News", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.PartnerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Partner", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestEducationAttachEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestEducationId");

                    b.ToTable("RequestEducationAttach", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestEducationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestEducation", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestServiceAttachEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestServiceId");

                    b.ToTable("RequestServiceAttach", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestService", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Route", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92e9b533-395f-40de-bf5c-daf5175174cf"),
                            Icon = "<i class=\"fa-solid fa-medal menu-icon\"></i>",
                            Order = 1,
                            Title = "مدیریت نقش",
                            Url = "/Admin/Role"
                        },
                        new
                        {
                            Id = new Guid("13efcf5b-ac2a-4ea7-8dbf-00794f5c3579"),
                            Icon = "<i class=\"fa-solid fa-user-tie menu-icon\"></i>",
                            Order = 2,
                            Title = "مدیریت کاربران",
                            Url = "/Admin/User"
                        },
                        new
                        {
                            Id = new Guid("5fd23be1-e7bf-4c08-b5d7-2a5df8c41d71"),
                            Icon = "<i class=\"fa-solid fa-store  menu-icon\"></i>",
                            Order = 3,
                            Title = "مدیریت محصولات",
                            Url = "/Admin/Product"
                        },
                        new
                        {
                            Id = new Guid("69d86bce-910a-4410-ae9a-da72409d3047"),
                            Icon = "<i class=\"fa-solid fa-pen-nib menu-icon\"></i>",
                            Order = 4,
                            Title = "مدیریت مقالات",
                            Url = "/Admin/Article"
                        },
                        new
                        {
                            Id = new Guid("c3d18153-b55e-4f50-b64c-93d4f6bea161"),
                            Icon = "<i class=\"fa-solid fa-images menu-icon\"></i>",
                            Order = 5,
                            Title = "مدیریت اسلایدر",
                            Url = "/Admin/Slider"
                        },
                        new
                        {
                            Id = new Guid("20cfd69e-b34c-4f6d-9e36-d9877239b3bb"),
                            Icon = "<i class=\"fa-solid fa-images menu-icon\"></i>",
                            Order = 6,
                            Title = "مدیریت شرکای تجاری",
                            Url = "/Admin/Partner"
                        },
                        new
                        {
                            Id = new Guid("7d9a13c7-a233-4551-8b4a-61b4c162ac4a"),
                            Icon = "<i class=\"fas fa-sticky-note menu-icon\"></i>",
                            Order = 7,
                            Title = "مدیریت اخبار",
                            Url = "/Admin/News"
                        },
                        new
                        {
                            Id = new Guid("04a19910-8314-4909-8ab6-28b01f8d8612"),
                            Icon = "<i class=\"fa-solid fa-headset menu-icon\"></i>",
                            Order = 8,
                            Title = "گفتگوی آنلاین",
                            Url = "/Admin/Chat"
                        },
                        new
                        {
                            Id = new Guid("2b187594-0cd6-4103-a93e-c7ecc35df142"),
                            Icon = "<i class=\"fa-solid fa-envelope menu-icon\"></i>",
                            Order = 9,
                            Title = "پیام ها",
                            Url = "/Admin/Contact"
                        },
                        new
                        {
                            Id = new Guid("0063a094-6e6b-40ff-b459-9db952afa2d8"),
                            Icon = "<i class=\"fa-solid fa-building menu-icon\"></i>",
                            Order = 10,
                            Title = "واحد های اداری",
                            Url = "/Admin/Departement"
                        },
                        new
                        {
                            Id = new Guid("b8f6c352-571a-4235-9e92-c325db6d6ddf"),
                            Icon = "<i class=\"fa-solid fa-wrench  menu-icon\"></i>",
                            Order = 11,
                            Title = "تنظیمات عمومی",
                            Url = "/Admin/Setting/General"
                        },
                        new
                        {
                            Id = new Guid("8072a16c-8db7-46dd-a3e4-e41f0ece7a76"),
                            Icon = "<i class=\"fa-solid fa-chart-bar  menu-icon\"></i>",
                            Order = 12,
                            Title = "آمار",
                            Url = "/Admin/Setting/Statistic"
                        },
                        new
                        {
                            Id = new Guid("d71c15ce-8785-4abf-8f5b-d58a1a4e8ca5"),
                            Icon = "<i class=\"fa-solid fa-star  menu-icon\"></i>",
                            Order = 13,
                            Title = "آمار",
                            Url = "/Admin/Setting/Feature"
                        },
                        new
                        {
                            Id = new Guid("faf6eddd-f721-4a8b-9614-7e7223759b58"),
                            Icon = "",
                            Order = 14,
                            Title = "ویژگی های محصول",
                            Url = "/Admin/Option"
                        },
                        new
                        {
                            Id = new Guid("adb33323-9d60-4993-8299-81d37ed3c41c"),
                            Icon = "",
                            Order = 15,
                            Title = "مستندات محصول",
                            Url = "/Admin/Document"
                        },
                        new
                        {
                            Id = new Guid("8fe991ba-68d0-4398-8ca5-9ad25e9fd75d"),
                            Icon = "",
                            Order = 16,
                            Title = "تصاویر محصول",
                            Url = "/Admin/ProductImage"
                        },
                        new
                        {
                            Id = new Guid("b89b74ce-4017-4d02-8e9e-42a0dc4341b7"),
                            Icon = "",
                            Order = 17,
                            Title = "مراکز",
                            Url = "/Admin/TreatmentCenter"
                        },
                        new
                        {
                            Id = new Guid("e7f43df3-5a79-4d69-b1f0-bb7badae1662"),
                            Icon = "<i class=\"fa fa-folder menu-icon\"></i>\r\n",
                            Order = 18,
                            Title = "کاتالوگ و کتاب کار",
                            Url = "/Admin/Catalog"
                        },
                        new
                        {
                            Id = new Guid("4c773ebb-a00b-4eb7-b275-18e67dc12ad0"),
                            Icon = "<i class=\"fa fa-graduation-cap menu-icon\"></i>\r\n",
                            Order = 19,
                            Title = "درخواست آموزش",
                            Url = "/Admin/Request/Education"
                        },
                        new
                        {
                            Id = new Guid("3bd7c475-345a-4f0f-8b6a-8001369c9101"),
                            Icon = "<i class=\"fas fa-code-pull-request menu-icon\"></i>\r\n",
                            Order = 20,
                            Title = "درخواست سرویس",
                            Url = "/Admin/Request/Service"
                        },
                        new
                        {
                            Id = new Guid("579d113a-ca1f-409f-a50f-7581984f8fb0"),
                            Icon = "<i class=\"fa fa-comment menu-icon\"></i>",
                            Order = 21,
                            Title = "دیدگاه کاربران",
                            Url = "/Admin/Request/Service"
                        });
                });

            modelBuilder.Entity("Domain.Entities.System.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BottomLogoPathEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BottomLogoPathFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemFourLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemFourTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemFourTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemOneLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemOneTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemOneTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemThreeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemThreeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemThreeTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemTwoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemTwoTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneItemTwoTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnOneTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemFourLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemFourTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemFourTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemOneLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemOneTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemOneTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemThreeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemThreeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemThreeTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemTwoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemTwoTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoItemTwoTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTwoTitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopLogoPathEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopLogoPathFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHoursEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHoursFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Setting", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6a6e1eb-8ef7-45ea-aef9-f199b96f92a9"),
                            AboutEn = "",
                            AboutFa = "",
                            AboutImagePath = "",
                            BottomLogoPathEn = "",
                            BottomLogoPathFa = "",
                            ColumnOneItemFourLink = "",
                            ColumnOneItemFourTitleEn = "",
                            ColumnOneItemFourTitleFa = "",
                            ColumnOneItemOneLink = "",
                            ColumnOneItemOneTitleEn = "",
                            ColumnOneItemOneTitleFa = "",
                            ColumnOneItemThreeLink = "",
                            ColumnOneItemThreeTitleEn = "",
                            ColumnOneItemThreeTitleFa = "",
                            ColumnOneItemTwoLink = "",
                            ColumnOneItemTwoTitleEn = "",
                            ColumnOneItemTwoTitleFa = "",
                            ColumnOneTitleEn = "",
                            ColumnOneTitleFa = "",
                            ColumnTwoItemFourLink = "",
                            ColumnTwoItemFourTitleEn = "",
                            ColumnTwoItemFourTitleFa = "",
                            ColumnTwoItemOneLink = "",
                            ColumnTwoItemOneTitleEn = "",
                            ColumnTwoItemOneTitleFa = "",
                            ColumnTwoItemThreeLink = "",
                            ColumnTwoItemThreeTitleEn = "",
                            ColumnTwoItemThreeTitleFa = "",
                            ColumnTwoItemTwoLink = "",
                            ColumnTwoItemTwoTitleEn = "",
                            ColumnTwoItemTwoTitleFa = "",
                            ColumnTwoTitleEn = "",
                            ColumnTwoTitleFa = "",
                            ContactNumber = "",
                            DescriptionEn = "",
                            DescriptionFa = "",
                            Instagram = "",
                            Linkedin = "",
                            LocationEn = "",
                            LocationFa = "",
                            Telegram = "",
                            TopLogoPathEn = "",
                            TopLogoPathFa = "",
                            Video = "",
                            WhatsApp = "",
                            WorkingHoursEn = "",
                            WorkingHoursFa = "",
                            YearsExperience = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.System.SliderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slider", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.System.StatisticEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberFour")
                        .HasColumnType("int");

                    b.Property<int>("NumberOne")
                        .HasColumnType("int");

                    b.Property<int>("NumberThree")
                        .HasColumnType("int");

                    b.Property<int>("NumberTwo")
                        .HasColumnType("int");

                    b.Property<string>("TitleEnFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFaTwo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statistic", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b067bbc-a472-4683-b1f1-bf44b3aa51f1"),
                            NumberFour = 0,
                            NumberOne = 0,
                            NumberThree = 0,
                            NumberTwo = 0,
                            TitleEnFour = "",
                            TitleEnOne = "",
                            TitleEnThree = "",
                            TitleEnTwo = "",
                            TitleFaFour = "",
                            TitleFaOne = "",
                            TitleFaThree = "",
                            TitleFaTwo = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Blog.ArticleEntity", b =>
                {
                    b.HasOne("Domain.Entities.Blog.CategoryEntity", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleRouteEntity", b =>
                {
                    b.HasOne("Domain.Entities.Identity.RoleEntity", "Role")
                        .WithMany("RoleRoutes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.System.RouteEntity", "Route")
                        .WithMany("RoleRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Entities.Product.DocumentEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany("Documents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.ImageEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.OptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Product.RelatedEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany("Relateds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.TreatmentCenterEntity", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany("TreatmentCenters")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.System.ChatMessageEntity", b =>
                {
                    b.HasOne("Domain.Entities.System.ChatGroupEntity", "ChatGroup")
                        .WithMany("chatMessages")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");
                });

            modelBuilder.Entity("Domain.Entities.System.NewsEntity", b =>
                {
                    b.HasOne("Domain.Entities.System.NewsCategoryEntity", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("NewsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsCategory");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestEducationAttachEntity", b =>
                {
                    b.HasOne("Domain.Entities.System.RequestEducationEntity", "RequestEducation")
                        .WithMany("RequestEducationAttaches")
                        .HasForeignKey("RequestEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestEducation");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestServiceAttachEntity", b =>
                {
                    b.HasOne("Domain.Entities.System.RequestServiceEntity", "RequestService")
                        .WithMany("RequestServiceAttaches")
                        .HasForeignKey("RequestServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Blog.CategoryEntity", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleEntity", b =>
                {
                    b.Navigation("RoleRoutes");
                });

            modelBuilder.Entity("Domain.Entities.Product.CategoryEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Images");

                    b.Navigation("Options");

                    b.Navigation("Relateds");

                    b.Navigation("TreatmentCenters");
                });

            modelBuilder.Entity("Domain.Entities.System.ChatGroupEntity", b =>
                {
                    b.Navigation("chatMessages");
                });

            modelBuilder.Entity("Domain.Entities.System.NewsCategoryEntity", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestEducationEntity", b =>
                {
                    b.Navigation("RequestEducationAttaches");
                });

            modelBuilder.Entity("Domain.Entities.System.RequestServiceEntity", b =>
                {
                    b.Navigation("RequestServiceAttaches");
                });

            modelBuilder.Entity("Domain.Entities.System.RouteEntity", b =>
                {
                    b.Navigation("RoleRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
